# RealStack Logstash 配置
# 用于收集、处理和转发日志到Elasticsearch

input {
  # 从文件系统收集应用日志
  file {
    path => [
      "/var/log/realstack/api.log",
      "/var/log/realstack/blockchain.log",
      "/var/log/realstack/transaction.log",
      "/var/log/realstack/security.log",
      "/var/log/realstack/user.log",
      "/var/log/realstack/assets.log"
    ]
    type => "realstack-app"
    codec => "json"
    tags => ["realstack", "application"]
    start_position => "beginning"
  }

  # 从Filebeat收集系统日志
  beats {
    port => 5044
    ssl => true
    ssl_certificate => "/etc/logstash/ssl/logstash.crt"
    ssl_key => "/etc/logstash/ssl/logstash.key"
    ssl_verify_mode => "none"
    tags => ["beats", "system"]
  }

  # 收集Wazuh安全告警
  http {
    port => 8080
    codec => "json"
    tags => ["wazuh", "security"]
  }
  
  # 从Kafka收集高容量日志
  kafka {
    bootstrap_servers => "kafka:9092"
    topics => ["realstack-logs", "realstack-security"]
    codec => "json"
    tags => ["kafka", "high-volume"]
    consumer_threads => 4
    decorate_events => true
  }
}

filter {
  # 解析JSON格式日志
  if [type] == "realstack-app" {
    json {
      source => "message"
      target => "log_data"
    }
    
    # 从log_data提取字段
    mutate {
      rename => { "[log_data][timestamp]" => "@timestamp" }
      rename => { "[log_data][level]" => "log_level" }
      rename => { "[log_data][message]" => "log_message" }
      rename => { "[log_data][service]" => "service" }
      rename => { "[log_data][trace_id]" => "trace_id" }
    }
    
    # 将时间戳转换为标准格式
    date {
      match => [ "@timestamp", "ISO8601" ]
      target => "@timestamp"
    }
  }
  
  # 区块链日志特殊处理
  if [service] == "blockchain" {
    # 解析区块链特有字段
    mutate {
      add_field => {
        "blockchain_network" => "%{[log_data][data][network]}"
        "transaction_hash" => "%{[log_data][data][tx_hash]}"
        "block_height" => "%{[log_data][data][block_height]}"
      }
    }
    
    # 将交易金额转换为数值型
    if [log_data][data][amount] {
      mutate {
        convert => { "[log_data][data][amount]" => "float" }
      }
    }
  }
  
  # 安全日志增强
  if [service] == "security" or "security" in [tags] {
    # 严重性评估
    if [log_level] == "ERROR" or [log_level] == "CRITICAL" or [log_data][data][severity] == "high" {
      mutate {
        add_field => { "security_severity" => "high" }
      }
    } else if [log_level] == "WARNING" or [log_data][data][severity] == "medium" {
      mutate {
        add_field => { "security_severity" => "medium" }
      }
    } else {
      mutate {
        add_field => { "security_severity" => "low" }
      }
    }
    
    # 安全事件分类
    if [log_data][data][event_type] {
      mutate {
        add_field => { "security_event_type" => "%{[log_data][data][event_type]}" }
      }
    }
    
    # 地理位置信息处理
    if [log_data][data][ip_address] {
      geoip {
        source => "[log_data][data][ip_address]"
        target => "geoip"
      }
    }
  }
  
  # 用户活动日志处理
  if [service] == "user" {
    # 提取用户操作数据
    mutate {
      add_field => {
        "user_id" => "%{[log_data][data][user_id]}"
        "user_action" => "%{[log_data][data][action]}"
      }
    }
    
    # 标记重要用户操作
    if [log_data][data][action] in ["password_change", "role_change", "account_recovery", "mfa_change"] {
      mutate {
        add_field => { "important_user_action" => "true" }
      }
    }
  }
  
  # 交易日志处理
  if [service] == "transaction" {
    # 提取交易数据
    mutate {
      add_field => {
        "transaction_id" => "%{[log_data][data][transaction_id]}"
        "transaction_type" => "%{[log_data][data][type]}"
        "transaction_status" => "%{[log_data][data][status]}"
      }
    }
    
    # 将金额转换为数值
    if [log_data][data][amount] {
      mutate {
        convert => { "[log_data][data][amount]" => "float" }
      }
    }
    
    # 标记大额交易
    if [log_data][data][amount] and [log_data][data][amount] > 10000 {
      mutate {
        add_field => { "high_value_transaction" => "true" }
      }
    }
  }
  
  # 资产日志处理
  if [service] == "assets" {
    mutate {
      add_field => {
        "asset_id" => "%{[log_data][data][asset_id]}"
        "asset_type" => "%{[log_data][data][asset_type]}"
        "asset_action" => "%{[log_data][data][action]}"
      }
    }
  }
  
  # 删除原始消息字段以减少存储需求
  mutate {
    remove_field => [ "message", "path", "host", "@version" ]
  }
  
  # 添加标准化元数据
  mutate {
    add_field => { 
      "environment" => "${ENVIRONMENT:production}"
      "application" => "realstack"
      "log_source" => "application"
    }
  }
  
  # 日志完整性处理
  fingerprint {
    source => ["@timestamp", "service", "log_message", "trace_id"]
    target => "log_fingerprint"
    method => "SHA256"
  }
}

output {
  # 将所有日志发送到Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    user => "${ELASTIC_USER:elastic}"
    password => "${ELASTIC_PASSWORD:changeme}"
    index => "realstack-%{service}-%{+YYYY.MM.dd}"
    template_name => "realstack"
    template_overwrite => true
    ilm_enabled => true
    ilm_rollover_alias => "realstack"
    ilm_pattern => "000001"
    ilm_policy => "realstack-policy"
    
    # 对安全日志设置不同的索引策略
    if "security" in [tags] or [service] == "security" {
      index => "realstack-security-%{+YYYY.MM.dd}"
    }
    
    # 对交易日志设置不同的索引策略
    if [service] == "transaction" {
      index => "realstack-transactions-%{+YYYY.MM.dd}"
    }
    
    # 对区块链日志设置不同的索引策略
    if [service] == "blockchain" {
      index => "realstack-blockchain-%{+YYYY.MM.dd}"
    }
  }
  
  # 高严重性安全日志同时发送到Kafka进行实时分析
  if [security_severity] == "high" {
    kafka {
      bootstrap_servers => "kafka:9092"
      topic_id => "realstack-security-alerts"
      codec => json {
        charset => "UTF-8"
      }
      retries => 5
      retry_backoff_ms => 200
    }
  }
  
  # 异常交易日志发送给欺诈检测系统
  if [service] == "transaction" and [log_level] in ["ERROR", "WARNING"] {
    http {
      url => "http://fraud-detection:8080/api/transaction-alert"
      http_method => "post"
      format => "json"
      headers => {
        "Content-Type" => "application/json"
        "X-API-Key" => "${FRAUD_API_KEY}"
      }
    }
  }
  
  # 开发环境中同时输出到控制台
  if "${ENVIRONMENT}" == "development" {
    stdout {
      codec => rubydebug
    }
  }
} 